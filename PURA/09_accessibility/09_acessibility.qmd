---
title: "Calculate accessibility"
date: "`r format(Sys.time(), '%d %B, %Y')`"
author:
  - name: Melina Klostermann
format: 
  html:
    code-fold: true
    code-overflow: scroll
    code-summary: "Show code"
    code-tools: true
    code-line-numbers: true
    
    toc: true
    toc-depth: 3
    toc-location: left
    toc-expand: false
    number-sections: true
    
    theme: sandstone
    fontsize: 11pt
    linestretch: 1.5
        
    fig-format: svg
    cap-location: margin
    crossref:
      fig-title: Fig
    
    embed-resources: true
    link-external-newwindow: true
    smooth-scroll: true
    
    execute:
      echo: true
      warning: false
---



```{r setup, include=FALSE}
require("knitr")
knitr::opts_chunk$set(warning=FALSE, message=FALSE, cache=TRUE, tidy.opts=list(width.cutoff=80))

library(ggplot2) 
source("/Users/melinaklostermann/Documents/projects/R_general_functions/theme_thesis.R")
theme_set(theme_thesis())
```


```{r libraries, include=FALSE, eval = T}
library(GenomicRanges)
library(rtracklayer)
library(GenomicFeatures)
library(tidyverse)
library(ggpubr)
library(Biostrings)
library(BSgenome)
library(ggseqlogo)


outpath <- "/Users/melinaklostermann/Documents/projects/Thesis/Thesis_code/PURA/10_accessibility/"
``` 

# What was done in this report?

- Transfer binding sites to transcript annotation
- Accessibility prediction with RNAplfold (command line) and z-score calculation
- Motif - 5-mer analysis

# Input

```{r echo=TRUE}
## transcript sequences fasta from gencode
transcript_fasta <- readDNAStringSet("/Users/melinaklostermann/Documents/projects/anno/GENCODEv31-p12/gencode.v31.transcripts.fa.gz")

# binding sites
BS <- readRDS("/Users/melinaklostermann/Documents/projects/PURA/Molitor-et-al-2022/binding_sites_characterized.rds") %>% makeGRangesFromDataFrame(keep.extra.columns = T)
# crosslinks
CL_list <- readRDS("/Users/melinaklostermann/Documents/projects/PURA/Molitor-et-al-2022/bw_merges.rds")
cl <- c(CL_list[[1]], CL_list[[2]])

# filtered annotation
annotation <- readRDS("/Users/melinaklostermann/Documents/projects/PURA/Molitor-et-al-2022/annotation.rds")

```


# Map BS to transcripts

```{r}
###################
# Get sequences of mature transcripts
##################

# expressed transcripts ( = transcripts with any crosslinks)
annotation_transcripts <- annotation[annotation$type == "transcript"] 
expressed_transcripts <- subsetByOverlaps(annotation_transcripts, cl) 

# get mature part of transcripts as pieces
annotation_transcripts_exons <- annotation[annotation$type != "gene"] 
expressed_transcripts_GR_list <- subsetByOverlaps(annotation_transcripts_exons, expressed_transcripts) %>%
  splitAsList(., f = .$transcript_id) %>%
  GRangesList(.) 


transcript_anno_meta <- names(transcript_fasta) 
transcript_anno_meta <- data.frame(all = transcript_anno_meta) %>%
  tidyr::separate(., col = all,
                  into = c("transcript_id", "gene_id", "a", "b", "isoform_name", "gene_name", "entrez_gene_id", "gene_type"), sep = "\\|")


names(transcript_fasta) <- substring(transcript_anno_meta$transcript_id,1,15)

# get transcript coordinates as GRanges
transcriptome_seqs_coords <- GRanges(seqnames = names(transcript_fasta), IRanges(start = 1, width = width(transcript_fasta)), strand = "+")

transcriptome_seqs_coords_expr <- transcriptome_seqs_coords[seqnames(transcriptome_seqs_coords) %in% substring(expressed_transcripts$transcript_id,1,15)] 


###########################
# BS sequence considering mature transcripts
##########################

# prepare a txdb of expressed transcripts
txdb <- makeTxDbFromGRanges(unlist(expressed_transcripts_GR_list))

# prepare a transcript mapper (contains transcript ids and names together with genomic positions of transcripts)
transcripts_txdb_mapper <- transcripts(txdb)

# get transcript-relative coordinates of BS
BS_tx<- mapToTranscripts(BS, txdb, extractor.fun = GenomicFeatures::exonsBy)


# change the seqnames to the transcript names
BS_tx<- as.data.frame(BS_tx)
BS_tx$seqnames<- transcripts_txdb_mapper$tx_name[as.numeric(BS_tx$seqnames)] %>% substring(.,1,15)

BS_tx$region <- BS[BS_tx$xHits]$region

```


# RNA accessibility

## Get fasta files of bound seqeunces and random background

```{r}
#############################################
### Obtain fasta files of bound sequences 
#############################################

# get transcript_id and transcript lengths from fasta names
transcript_fasta_df <- data.frame(tx_name = names(transcript_fasta), width = width(transcript_fasta))


# elongate binding sites to window for RNAplfold analysis
w <- 248 

BS_tx_501nt <- BS_tx %>%
  left_join(transcript_fasta_df, by= c(seqnames = "tx_name"), suffix = c(".bs", ".tx")) %>% 
  mutate(end = end + w, start = start -w) %>%
  dplyr::filter((end <  width.tx)  & (start > 0))

BS_tx_501nt <- makeGRangesFromDataFrame(BS_tx_501nt, keep.extra.columns = T)
BS_tx_501nt <- BS_tx_501nt[width(BS_tx_501nt) == 501]

# only one transcript per BS

BS_tx_501nt <- BS_tx_501nt[!duplicated(BS_tx_501nt$xHits)]

# get transcript sequences of enlarged BS 
BS_tx_501nt_seqs <- Biostrings::getSeq(x = transcript_fasta, names = BS_tx_501nt)
BS_tx_501nt_seqs <- BS_tx_501nt_seqs[width(BS_tx_501nt_seqs)==501]

writeXStringSet(BS_tx_501nt_seqs, filepath = paste0(outpath,"endo_BS_trans_500nt.fasta"))


```

```{r eval = F}
############################################
### Obtain fasta files of random background
############################################

set.seed(2)
n_random <- 10000

# filter for long enough transcripts
big_transcript_fasta_df <- transcript_fasta_df[transcript_fasta_df$width > 500,]

# get set of random transcripts
random_transcripts <- data.frame(transcript = sample(1:NROW(big_transcript_fasta_df), n_random, replace = F))
random_transcripts$transcript_id <- big_transcript_fasta_df[random_transcripts$transcript,]$tx_name

# sequences of random expressed transcripts set
random_transcript_seqs <-  transcript_fasta[names(transcript_fasta) %in% random_transcripts$transcript_id,] 

# subset for random window of 501 nt
w_2 <- (2*w + 5)
random_transcript_seqs_500 <- random_transcript_seqs
random_transcript_seqs_pos <- list()

for(i in 1:NROW(random_transcript_seqs)){
  print(width(random_transcript_seqs[i])-(w_2-1))
  random_pos = sample(1:(width(random_transcript_seqs[i])-(w_2-1)), 1) 
  random_transcript_seqs_500[i] <- subseq( random_transcript_seqs[i], start = random_pos, width = w_2)
  
  random_transcript_seqs_pos[[i]] <- data.frame(idx = i, tx_name = names(random_transcript_seqs[i]), start = random_pos)
} 


writeXStringSet(random_transcript_seqs_500, filepath = paste0(output,"background_transcripts_500nt.fasta"))


```

## Predict probabtility to be unpaired with RNApLfold

- Note: RNAplfold is used here via command line on the fasta files created above
- RNAplfold creates one folder per fasta input
- each folder contains a text file ending on _*lunp for each sequence in the fasta file

```{bash eval = F}

fastas="/home/melina/HNRNPL_PU/RNAplfold-5SS/fastas_neg/*.fasta"

for f in $fastas
do
  # make a output folder
  FILENAME=`basename ${f%%.*}`
  DIRNAME="RNApl_$FILENAME"

  cd /home/melina/HNRNPL_PU/RNAplfold-5SS/neg_set
  rm -r $DIRNAME
  mkdir $DIRNAME
  cd $DIRNAME

  #parameters RNAplfold
  w=100
  l=30
  u=30

  #execute RNAplfold
  /home/melina/programs/ViennaRNA/Progs/VRP/bin/RNAplfold -W $w -L $l -u $u --auto-id < $f

done


```

## Concatinate RNAplfold files

```{r eval = F}
input_folders <- list("./RNApl_background_transcripts_500nt/",
                      "./RNApl_endo_BS_trans_500nt/")

output_probs <- list("./RNApl_endo_BS_trans_500nt.RData")

# function to get probs
import_unpair_prob <- function(folder){
  RNApl_files =list.files(path = folder,
                          pattern = "*_lunp")
  
  unpaired_prob = lapply(RNApl_files, function(x) data.table::fread(paste0(folder,x)))
  
  names(unpaired_prob) = 1:length(unpaired_prob)
  
  unpaired_prob = unpaired_prob %>%
    map(~dplyr::rename(.x,  pos = `#i$`, `1`=`l=1`) %>%
          as.data.frame() ) %>%
    map_dfc(~.x[,2])
  
  return(unpaired_prob)
}

# make RData with probs
probs <- map(input_folders, ~import_unpair_prob(.x))
print("# probs")
head(probs)


# save(probs, file =output_probs)

```


## Calculate accessibility z-score and plot

```{r eval}

probs <- readRDS("/Users/melinaklostermann/Documents/projects/PURA/Molitor-et-al-2022/RNApl_endo_BS_trans_500nt.rds")

#  log-odds ratio
##############################
### First, unpaired probabilitties from RNAplfold are transfered to log-odd ratios 
### to obtain a bell-shaped distribution of values which is neccesary for z-score calculation

# log-odds ratio binding sites (BS)
accessibility_BS <- probs[[2]] %>% as.matrix(.)
accessibility_BS <- log(accessibility_BS/(1-accessibility_BS)) 
accessibility_BS[is.infinite(accessibility_BS)] <- NA
accessibility_BS <- as.data.frame(accessibility_BS)

# log-odds ratio background (bg)
accessibility_bg <- probs[[1]] %>% as.matrix(. )
accessibility_bg <- log(accessibility_bg/(1-accessibility_bg)) 
accessibility_bg[is.infinite(accessibility_bg)] <- NA
accessibility_bg <- as.data.frame(accessibility_bg)

# calculate and plot means of log odds
accessibility_bs_means <- apply(accessibility_BS,1, function(x) mean(x, na.rm = T))
accessibility_bg_means <- apply(accessibility_bg,1,function(x) mean(x, na.rm = T))  
  
gg_df_mean <- data.frame(pos = c(-250:250), BS = accessibility_bs_means, BG=accessibility_bg_means  )

# background mean and sd from subsets
#############################
### the population mean and background are calculated from 1000 subsets of the background

# index for 1000 sets with 100 nt sequences
idx_sets <- replicate(1000, sample(1:ncol(accessibility_bg), 1000), simplify = F)

# get sets
bg_sets <- map(idx_sets, ~accessibility_bg[,.x])

# calculate nt-wise mean per set and make means_df
bg_stats <- map(bg_sets, ~t(.x) %>%
                  as.data.frame(.) %>%
                  summarise_all(.funs = function(x) mean(x, na.rm=T)))
bg_stats_df <- map_dfr(bg_stats, ~.x)

# calculate mean and sd of means_df
bg_stats_df_stats <- data.frame(mean = apply(bg_stats_df, 2, function(x) mean(x, na.rm = T)),
                                sd = apply(bg_stats_df, 2, function(x) sd(x, na.rm =T)), pos = -250:250)



# z-scores of BS accessibility
#############################
# z-score  = sample mean -  population mean / population sd (sample = binding site, population = background)

df_accessibility_bs_bg <- bg_stats_df_stats %>%
  mutate(bs_mean = gg_df_mean$BS, 
         z_score = (bs_mean - mean) /sd) %>% 
  rowwise() %>%
  mutate(p_z = 2*pnorm(-abs(z_score))) %>%
  ungroup() %>%
  mutate(p_z_adj = p.adjust(p_z),
         pos = -250:250,
         sig_p = p_z_adj < 0.05)


# calc z-score for UTR bs
##########################
# log-odds ratio binding sites (BS)

utr_idx <- which(BS_tx_501nt$region == "three_prime_UTR")

accessibility_BS <- probs[[2]] %>% as.matrix(.) %>% .[,utr_idx]
accessibility_BS <- log(accessibility_BS/(1-accessibility_BS)) 
accessibility_BS[is.infinite(accessibility_BS)] <- NA
accessibility_BS <- as.data.frame(accessibility_BS)

accessibility_bs_means <- apply(accessibility_BS,1, function(x) mean(x, na.rm = T))


utr_df_mean <- data.frame(pos = c(-250:250), BS = accessibility_bs_means, BG=accessibility_bg_means  )

df_accessibility_utr_bg <- bg_stats_df_stats %>%
  mutate(bs_mean = utr_df_mean$BS, 
         z_score = (bs_mean - mean) /sd) %>% 
  rowwise() %>%
  mutate(p_z = 2*pnorm(-abs(z_score))) %>%
  ungroup() %>%
  mutate(p_z_adj = p.adjust(p_z),
         pos = -250:250,
         sig_p = p_z_adj < 0.05)


# calc z-score for CDS bs
##########################
# log-odds ratio binding sites (BS)

cds_idx <- which(BS_tx_501nt$region == "CDS")

accessibility_BS <- probs[[2]] %>% as.matrix(.) %>% .[,cds_idx]
accessibility_BS <- log(accessibility_BS/(1-accessibility_BS)) 
accessibility_BS[is.infinite(accessibility_BS)] <- NA
accessibility_BS <- as.data.frame(accessibility_BS)

accessibility_bs_means <- apply(accessibility_BS,1, function(x) mean(x, na.rm = T))

cds_df_mean <- data.frame(pos = c(-250:250), BS = accessibility_bs_means, BG=accessibility_bg_means  )

df_accessibility_cds_bg <- bg_stats_df_stats %>%
  mutate(bs_mean = cds_df_mean$BS, 
         z_score = (bs_mean - mean) /sd) %>% 
  rowwise() %>%
  mutate(p_z = 2*pnorm(-abs(z_score))) %>%
  ungroup() %>%
  mutate(p_z_adj = p.adjust(p_z),
         pos = -250:250,
         sig_p = p_z_adj < 0.05)

# plot
#################
ggplot(df_accessibility_bs_bg, aes(x=pos))+
  geom_hline(yintercept = 1, color = "grey")+
  geom_line(data = df_accessibility_utr_bg, aes(x=pos, y=z_score), color = "maroon", alpha = 0.8)+
  geom_line(data = df_accessibility_cds_bg, aes(x=pos, y=z_score), color = "goldenrod", alpha = 0.8)+
  geom_line(aes(y=z_score),  color = "black")+
  xlim(c(-100,100))+
  geom_rug(aes(color=sig_p))+
  scale_color_manual(values = c( "transparent", "darkgreen"))+
  theme(legend.position="none")+
  theme_thesis()

ggsave(paste0(outpath, "acessibility.pdf"), width = 6, height = 6, units = "cm")




```




# Session Info
```{r}
sessionInfo()

```


